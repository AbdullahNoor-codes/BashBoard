import React, { useEffect, useState } from 'react';
import axios from 'axios';
import ReportCard from '../components/features/reports/ReportCards';
import { isSameDay } from '@/lib/utils';
import sendReportToSlack from '../services/slackService';

function Reports() {
  const [tasks, setTasks] = useState([]);
  const [reportData, setReportData] = useState(null);
  const [userEmail, setUserEmail] = useState('');

  // Fetch all tasks when component mounts
  useEffect(() => {
    fetchTasks();
  }, []);

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      const user = JSON.parse(userData);
      setUserEmail(user.email);
    }
  }, []);

  useEffect(() => {
    // Auto-send report to Slack at 11:30 PM
    const checkAndSendReport = async () => {
      const now = new Date();
      if (now.getHours() === 22 && now.getMinutes() === 16) {
        if (reportData) {
          await sendReportToSlack(reportData, userEmail);
        }
      }
    };

    const interval = setInterval(checkAndSendReport, 60000); // Check every minute
    return () => clearInterval(interval);
  }, [reportData, userEmail]);

  const fetchTasks = async () => {
    try {
      const response = await axios.get('https://bashhub-apis.vercel.app/apis/tasks');
      setTasks(response.data);
      generateReport(response.data);
    } catch (error) {
      console.error('Error fetching tasks:', error);
    }
  };

  const generateReport = (tasks) => {
    // Get date range from 7 days ago to today
    const today = new Date();
    let reportDate = null;
    let reportTasks = null;

    // Look for tasks from past 7 days
    for (let i = 7; i >= 0; i--) {
      const checkDate = new Date(today);
      checkDate.setDate(today.getDate() - i);

      const tasksForDate = tasks.filter(task => 
        isSameDay(new Date(task.task_time), checkDate)
      );

      if (tasksForDate.length > 0 && !reportDate) {
        reportDate = checkDate;
        reportTasks = tasksForDate;
      }
    }

    if (reportDate && reportTasks) {
      // Organize tasks by section
      const organizedTasks = {
        'current-tasks': [],
        'dws1': { completed: [], inProgress: [], active: [] },
        'dws2': { completed: [], inProgress: [], active: [] },
        'dws3': { completed: [], inProgress: [], active: [] },
        'rws': { completed: [], inProgress: [], active: [] }
      };

      // Categorize tasks
      reportTasks.forEach(task => {
        const section = task.coming_from;
        if (section === 'current-tasks') {
          organizedTasks['current-tasks'].push(`${task.task_name} (Tomorrow)`);
        } else if (section) {
          if (task.is_complete) {
            organizedTasks[section].completed.push(`${task.task_name} (Done)`);
          } else if (task.is_in_progress) {
            organizedTasks[section].inProgress.push(`${task.task_name} (Continue)`);
          } else {
            organizedTasks['current-tasks'].push(`${task.task_name} (Tomorrow)`);
          }
        }
      });

      // Create report data
      setReportData({
        date: reportDate.toLocaleDateString('en-GB'),
        sections: {
          'current-tasks': organizedTasks['current-tasks'],
          'dws1': [
            ...organizedTasks.dws1.completed,
            ...organizedTasks.dws1.inProgress
          ],
          'dws2': [
            ...organizedTasks.dws2.completed,
            ...organizedTasks.dws2.inProgress
          ],
          'dws3': [
            ...organizedTasks.dws3.completed,
            ...organizedTasks.dws3.inProgress
          ],
          'rws': [
            ...organizedTasks.rws.completed,
            ...organizedTasks.rws.inProgress
          ]
        }
      });
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Daily Reports</h1>
      <div className="flex flex-col gap-4">
        {reportData && (
          <>
            <ReportCard data={reportData} />
            <div className="text-sm text-gray-500 mt-2">
              Report generated by: {userEmail}
            </div>
          </>
        )}
      </div>
    </div>
  );
}

export default Reports;